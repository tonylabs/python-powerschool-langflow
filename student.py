import os
import chromadb
from chromadb import Collection
import powerschool
import requests
import embedding
from dotenv import load_dotenv

load_dotenv()

CHROMA_DB_HOST = os.getenv("CHROMA_DB_HOST")
CHROMA_DB_PORT = os.getenv("CHROMA_DB_PORT")

EMBEDDING_API_URL = os.getenv("EMBEDDING_API_URL")

chroma_client = chromadb.HttpClient(host=CHROMA_DB_HOST, port=CHROMA_DB_PORT)

def vectorize_students(collection: Collection, embedding_string_creator: callable) -> None:

	if (os.getenv('PS_CLIENT_ID') is None or
			os.getenv('PS_CLIENT_SECRET') is None or
			os.getenv('PS_HOST') is None):
		print("Environment variables were not set.")
		exit()

	client_id = os.getenv("PS_CLIENT_ID")
	client_secret = os.getenv("PS_CLIENT_SECRET")
	credentials = (client_id, client_secret)
	ps = powerschool.PowerSchool(os.getenv('PS_HOST'), auth=credentials)

	students_table = ps.get_schema_table('students')
	params = {
		'q': 'enroll_status=ge=0',
		'pagesize': 1000,
		'page': 1,
		'projection': 'dcid,schoolid,student_number,lastfirst,last_name,first_name,grade_level,gender,districtentrydate,entrydate,exitdate,father,mother,enroll_status',
	}
	array_students = students_table.query(**params)

	for student in array_students:
		student_data = {
			"student_id": student['dcid'],
			"name": student['lastfirst'],
			"metadata": {
				"SCHOOL ID": student['schoolid'],
				"STUDENT NUMBER": student['student_number'],
				"LAST NAME": student['last_name'],
				"FIRST NAME": student['first_name'],
				"GENDER": 'Female' if student['gender'] == 'F' else 'Male',
				"GRADE LEVEL": student['grade_level']
			},
			"$vector": embedding.create_embeddings(embedding_string_creator(student)),
		}

		# Add the student document to the collection
		collection.add(
			ids=[student_data["student_id"]],
			metadatas=[student_data["metadata"]],
			embeddings=[student_data["$vector"]]
		)


def query(collection: Collection, query_text):
	"""
	Queries the Chroma collection using embeddings generated by the Ollama API.

	Args:
		collection (Collection): The Chroma collection to query.
		query_text (str): The text query to embed and search in the collection.

	Returns:
		dict: The query results from Chroma.
	"""

	payload = {
		"model": "nomic-embed-text",  # Using the same model as in create_embeddings
		"prompt": query_text  # Use the query text directly
	}

	response = requests.post(EMBEDDING_API_URL, json=payload)

	if response.status_code == 200:
		query_embedding = response.json().get("embedding")
		if not query_embedding:
			raise ValueError("Embedding not found in API response.")

		# Query the Chroma collection with the embedding
		results = collection.query(
			query_embeddings=[query_embedding],  # Use the embedding for the query
			n_results=2  # Adjust the number of results as needed
		)
		return results
	else:
		raise Exception(f"Failed to get embeddings: {response.status_code}, {response.text}")


def main():
	print(chroma_client.heartbeat())
	print(chroma_client.get_version())
	print(chroma_client.list_collections())

	# Create or get a collection
	collection_name = "students"
	collection = chroma_client.get_or_create_collection(name=collection_name)

	'''
	vectorize_students(
		collection,
		lambda data: (
			f"STUDENT NAME: {data['lastfirst']} | "
		),
	)
	'''

	results = query(collection, "Who is Sophia?")
	print(results)


if __name__ == "__main__":
	main()